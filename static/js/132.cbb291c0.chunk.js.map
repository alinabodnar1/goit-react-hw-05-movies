{"version":3,"file":"static/js/132.cbb291c0.chunk.js","mappings":"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","sources":["fetchMovies.js","pages/MovieDetail/MovieDetail.styled.js","pages/MovieDetail/MovieDetail.jsx"],"sourcesContent":["import axios from \"axios\";\nimport { Loading } from 'notiflix/build/notiflix-loading-aio';\n\nexport function startLoader() { \n    Loading.circle({\n        svgColor: '#B92F2C',\n    });\n};\n\nexport function stopLoader() { \n    Loading.remove();\n};\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'd9ccf9379e20517fec2957866e8ec079';\n\nasync function getTrendMovies() {\n  try {\n        const url = `${BASE_URL}movie/popular?api_key=${API_KEY}`;\n        startLoader();\n        const response = await axios.get(url);\n        return response.data;\n    } catch (error) {\n        alert('Oops, an error occurred');\n    } finally {\n        stopLoader();\n    }\n}\n\nasync function getMovieDetails(id) {\n  try {\n        const url = `${BASE_URL}/movie/${id}?api_key=${API_KEY}`;\n        startLoader();\n        const response = await axios.get(url);\n        return response.data;\n    } catch (error) {\n        alert('Oops, an error occurred');\n    } finally {\n        stopLoader();\n    }\n}\n\nasync function getMovieCast(id) {\n  try {\n        const url = `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`;\n        const response = await axios.get(url);\n        return response.data;\n    } catch (error) {\n        alert('Oops, an error occurred');\n    } \n}\nasync function getMovieReviews(id) {\n  try {\n    const url = `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`;\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    alert('Oops, an error occurred');\n  } \n}\n\nasync function getMovieSearch(query) {\n  try {\n        const url = `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`;\n        startLoader();\n        const response = await axios.get(url);\n        return response.data;\n    } catch (error) {\n        alert('Oops, an error occurred');\n    } finally {\n        stopLoader();\n    } \n}\nexport {getTrendMovies, getMovieDetails, getMovieCast, getMovieReviews, getMovieSearch} ;","import styled from \"styled-components\";\nimport { Link } from 'react-router-dom';\n\nexport const Button = styled.button`\n    display: inline-block;\n    margin-left: 20px;\n    margin-top: 20px;\n    margin-bottom: 20px;\n    padding: 8px 10px;\n    min-width: 50px;\n    border-radius: 20px;\n    border-color: transparent;\n    text-transform: uppercase; \n    font-weight: 700;\n    line-height: 1.5;\n    color: #FF7F50;\n`;\nexport const Container = styled.div`\n  max-width: 960px;\n  margin: 0 auto;\n  padding: 0 16px;\n  display: flex;\n  gap: 15px;\n`;\n\nexport const Image = styled.img`\n    display: block;\n    width: 80%;\n    height: 80%;\n    padding: 10px;\n    object-fit: contain;\n    border-radius: 5px;\n`;\n\nexport const Title = styled.h2`\n    display: block;\n    margin: 0 auto;\n    text-decoration: underline;\n    font-weight: 700;\n    color: #505050;\n`;\n\nexport const Paragraph = styled.p`\n    display: block;\n    text-align: justify;\n`;\n\nexport const StyledLink = styled(Link)`\n    color: #686868;\n    padding: 8px 16px;\n    text-decoration: none;\n    color: black;\n    font-weight: 500;\n  \n    &.active {\n    color: #FF7F50;\n    }\n`;","import React, {useState, useEffect,  Suspense, useRef } from 'react';\nimport { Link, useParams, useLocation, Outlet } from 'react-router-dom';\nimport { ToastContainer, toast } from 'react-toastify';\nimport { getMovieDetails } from '../../fetchMovies';\nimport { Button, Container,Image, Title, Paragraph, StyledLink } from './MovieDetail.styled';\n\nconst getGenres = genresArray =>  {\n  return genresArray.map(genre => genre.name).join(', ');\n}\n\nexport default function MovieDetail() {\n  const [movie, setMovie] = useState(''); \n  const { movieId } = useParams();\n  const location = useLocation();\n  const backLinkHref = useRef(location.state?.from ?? \"/\");\n  const imgURL = 'https://image.tmdb.org/t/p/w200';\n\n  useEffect(() => {\n    getMovieDetails(movieId).then(data => {\n      if (data) {\n        setMovie(data);\n      }\n    })\n      .catch(() => {\n        toast.error(\"An error occurred while responding movie details from the backend.\")\n      });\n  }, [movieId]);\n\n  if (!movie) {\n     return toast.error(\"There is no movie details for this movie.\")\n  }\n  \n  const genres = getGenres(movie.genres);\n  \n  return (\n    <>\n      <Link to={backLinkHref.current}>\n        <Button variant=\"text\">Back</Button>\n      </Link>\n      <div>\n        <Container>\n          <Image src={movie.poster_path && `${imgURL}${movie.poster_path}`}\n            alt={movie.title} />\n          <div >\n            <Title>{movie.title}</Title>\n            <p><b>Popularity:</b> {movie.popularity}</p>\n            <p><b>Overview:</b>\n              <Paragraph>{movie.overview}</Paragraph>\n            </p>\n            <p><b>Genres:</b> {genres}</p>\n          </div>\n        </Container>\n        <ul>\n          <li><StyledLink to=\"cast\">Cast</StyledLink></li>\n          <li><StyledLink to=\"reviews\">Reviews</StyledLink></li>\n        </ul>\n        <Suspense fallback={<div>Loading additional information...</div>}>\n          <Outlet />\n        </Suspense>\n        <ToastContainer\n            autoClose={3000}\n            position=\"top-left\" />\n      </div> \n    </>\n  )\n}\n"],"names":["startLoader","Loading","svgColor","stopLoader","BASE_URL","API_KEY","getTrendMovies","url","axios","response","data","alert","getMovieDetails","id","getMovieCast","getMovieReviews","getMovieSearch","query","Button","styled","Container","Image","Title","Paragraph","StyledLink","Link","MovieDetail","useState","movie","setMovie","movieId","useParams","location","useLocation","backLinkHref","useRef","state","from","useEffect","then","catch","toast","genres","map","genre","name","join","to","current","variant","src","poster_path","alt","title","popularity","overview","Suspense","fallback","autoClose","position"],"sourceRoot":""}