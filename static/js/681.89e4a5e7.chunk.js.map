{"version":3,"file":"static/js/681.89e4a5e7.chunk.js","mappings":"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","sources":["components/Components.styled.js","components/Reviews.jsx","fetchMovies.js"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const List = styled.ul`\n    display: flex;\n    flex-wrap: wrap;\n    margin-top: 10px;\n`;\nexport const ListLine = styled.ul`\n    border-top: 1px solid #505050;\n    list-style: none;\n`;\n\nexport const Paragraph = styled.p`\n    display: block;\n    text-align: justify;\n`;\n\nexport const Form = styled.form`\n    display: block;\n    margin-top: 50px;\n`;\nexport const ItemCast = styled.ul`\n    display: block;\n    margin-top: 10px;\n`;\n    ","import React, { useState, useEffect } from 'react';\nimport { useParams, useLocation } from 'react-router-dom';\nimport { getMovieReviews } from '../fetchMovies';\nimport { Paragraph, ListLine } from './Components.styled';\n\nexport default function Reviews() {\n  const [reviews, setReviews] = useState([]);\n  const [noReviews, setNoReviews] = useState(false);\n    const { movieId } = useParams();\n    const location = useLocation();\n  \n   useEffect(() => {\n     getMovieReviews(movieId).then(data => {\n       if (data.results.length === 0 || !data.results) {\n         setNoReviews(true);\n        return;\n      }\n         setReviews(data.results);\n     })\n     .catch(() => {\n        alert(\"An error occurred while responding movies from the backend.\")\n      });\n   }, [movieId]);\n  \n  return (\n    <div>\n      <ListLine> \n        {reviews?.length > 0 && reviews.map(review => (\n          <li key={review.id} state={{ from: location }} >\n                <p><b> Author: {review.author}</b></p>\n                <Paragraph>{review.content}</Paragraph>\n          </li> \n        ))} \n      </ListLine>\n      {noReviews && <p>We don't have any reviews for this movie.</p>}\n    </div>\n  )\n}\n","import axios from \"axios\";\nimport { Loading } from 'notiflix/build/notiflix-loading-aio';\n\nexport function startLoader() { \n    Loading.circle({\n        svgColor: '#B92F2C',\n    });\n};\n\nexport function stopLoader() { \n    Loading.remove();\n};\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'd9ccf9379e20517fec2957866e8ec079';\n\nasync function getTrendMovies() {\n  try {\n        const url = `${BASE_URL}movie/popular?api_key=${API_KEY}`;\n        startLoader();\n        const response = await axios.get(url);\n        return response.data;\n    } catch (error) {\n        alert('Oops, an error occurred');\n    } finally {\n        stopLoader();\n    }\n}\n\nasync function getMovieDetails(id) {\n  try {\n        const url = `${BASE_URL}/movie/${id}?api_key=${API_KEY}`;\n        startLoader();\n        const response = await axios.get(url);\n        return response.data;\n    } catch (error) {\n        alert('Oops, an error occurred');\n    } finally {\n        stopLoader();\n    }\n}\n\nasync function getMovieCast(id) {\n  try {\n        const url = `${BASE_URL}/movie/${id}/credits?api_key=${API_KEY}`;\n        const response = await axios.get(url);\n        return response.data;\n    } catch (error) {\n        alert('Oops, an error occurred');\n    } \n}\nasync function getMovieReviews(id) {\n  try {\n    const url = `${BASE_URL}/movie/${id}/reviews?api_key=${API_KEY}`;\n    const response = await axios.get(url);\n    return response.data;\n  } catch (error) {\n    alert('Oops, an error occurred');\n  } \n}\n\nasync function getMovieSearch(query) {\n  try {\n        const url = `${BASE_URL}/search/movie?api_key=${API_KEY}&query=${query}`;\n        startLoader();\n        const response = await axios.get(url);\n        return response.data;\n    } catch (error) {\n        alert('Oops, an error occurred');\n    } finally {\n        stopLoader();\n    } \n}\nexport {getTrendMovies, getMovieDetails, getMovieCast, getMovieReviews, getMovieSearch} ;"],"names":["List","styled","ListLine","Paragraph","Form","ItemCast","Reviews","useState","reviews","setReviews","noReviews","setNoReviews","movieId","useParams","location","useLocation","useEffect","getMovieReviews","then","data","results","length","catch","alert","map","review","state","from","author","content","id","startLoader","Loading","svgColor","stopLoader","BASE_URL","API_KEY","getTrendMovies","url","axios","response","getMovieDetails","getMovieCast","getMovieSearch","query"],"sourceRoot":""}